The minix scheduler is found in the /user/src/kernel/ directory in the proc.c file. In this file's source code, there's a function pick_proc() that is responsible for picking the next process to run. In the proc.h file, it has a DEFINE statement that says there are 16 queues, each with different processes within them, which are numbered 0-15. Highest priority is 0 and lowest is 15 (or NR_SCHEDQUEUES). Queues within the 0-6 range have the highest priority so I let these be untouched, but the other queues index 7+ have a lower priority. I made changes to the code so that the process of picking what's next in the queue from 7-15 be randomized. The probability the randomization takes place is 9/16 because we donâ€™t randomize the first 7 queues. This made the rebooting process a bit slower than usual even with simple commands like ls. q is the priority queue number and rdy_head[] is the array that that holds the queues. rp holds the next ready process. If the queue doesn't have a ready process, then the if(!(rp = rdy_head[q])) statement will execute, which sets a pointer to the process that isn't ready. One way to test my code would be to use fork methods and printing the process ID numbers to see if it actually randomizes the processes or not.
